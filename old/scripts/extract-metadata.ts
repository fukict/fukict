#!/usr/bin/env tsx
/**
 * 为每个 package 提取 metadata.ts
 * 包含 version 和 dependencies 信息
 */
import { existsSync, readFileSync, writeFileSync } from 'fs';
import { dirname, resolve } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// 只有 runtime 和 widget 需要 metadata
const PACKAGES = ['runtime', 'widget'];

interface PackageJson {
  name: string;
  version: string;
  dependencies?: Record<string, string>;
}

function extractMetadata(packageName: string): void {
  const packagePath = resolve(__dirname, '..', 'packages', packageName);
  const packageJsonPath = resolve(packagePath, 'package.json');
  const metadataPath = resolve(packagePath, 'src', 'metadata.ts');

  if (!existsSync(packageJsonPath)) {
    console.error(`❌ Package not found: ${packageName}`);
    return;
  }

  const packageJson: PackageJson = JSON.parse(
    readFileSync(packageJsonPath, 'utf-8'),
  );

  // 格式化 dependencies
  const dependencies = packageJson.dependencies || {};
  const depsEntries = Object.entries(dependencies);
  const depsString =
    depsEntries.length === 0
      ? '{}'
      : `{\n${depsEntries.map(([key, value]) => `    '${key}': '${value}',`).join('\n')}\n  }`;

  const metadata = `/**
 * Package metadata
 * Auto-generated by scripts/extract-metadata.ts
 * DO NOT EDIT MANUALLY
 */

export const METADATA = {
  version: '${packageJson.version}',
  name: '${packageJson.name}',
  dependencies: ${depsString},
} as const;
`;

  writeFileSync(metadataPath, metadata, 'utf-8');
  console.log(`✅ Extracted metadata for ${packageName}`);
}

function main(): void {
  console.log('📦 Extracting metadata for all packages...\n');

  for (const pkg of PACKAGES) {
    extractMetadata(pkg);
  }

  console.log('\n✨ All metadata extracted successfully!');
}

main();
