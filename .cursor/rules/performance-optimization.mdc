---
description: 
globs: 
alwaysApply: false
---
# 性能优化指南

## 核心性能理念
Vanilla DOM 通过**编译时 + 运行时优化**策略实现极致性能，最小化运行时开销的同时最大化效率。

## 编译时优化
### 静态分析 (Babel 插件)
- **模板提取**: 识别可重用的静态 HTML 部分
- **动态标记**: 仅标记需要运行时更新的节点
- **事件优化**: 检测事件委托模式
- **代码生成**: 生成优化的 DOM 创建代码

### 包大小优化
- **核心目标**: 运行时 < 10KB gzipped
- **Tree Shaking**: 仅导出使用的函数
- **模块结构**: 分离关注点以实现最佳打包
- **类型剥离**: 在生产环境中移除 TypeScript 开销

## 运行时优化
### DOM 操作
- **精确更新**: 仅修改变化的 DOM 节点
- **批量操作**: 将 DOM 更改分组以最小化重排/重绘
- **模板克隆**: 重用静态模板而非重新创建
- **Fragment 使用**: 对多节点操作使用 DocumentFragments

### 内存管理
- **事件清理**: 自动移除事件监听器
- **WeakMap 使用**: 允许自动垃圾回收
- **引用管理**: 在卸载时清理 DOM 引用
- **循环引用预防**: 避免内存泄漏

### 渲染策略
[packages/core/src/renderer.ts](mdc:packages/core/src/renderer.ts) 中的关键实现：
- **createDOMFromTree()**: 高效的 VNode 到 DOM 转换
- **updateDOM()**: 精确的差异对比和更新
- **render()**: 优化的渲染管道

## 性能监控
### 基准测试场景
- **首次渲染**: 初始 DOM 创建速度
- **更新性能**: 变更检测和 DOM 补丁
- **大列表**: 1000+ 项目渲染和更新
- **内存使用**: 操作期间的 RAM 消耗

### 测量工具
- **Performance API**: 内置浏览器计时
- **内存分析**: DevTools 内存跟踪
- **包分析**: 大小监控
- **对比测试**: 与 React、Vue、Solid 对比

## 优化技术
### VNode 结构
在 [packages/core/src/types.ts](mdc:packages/core/src/types.ts) 中定义：
- 内存效率的最小对象结构
- 基于类型的性能分发
- 可重用的节点模式

### DOM 工具
在 [packages/core/src/dom-utils.ts](mdc:packages/core/src/dom-utils.ts) 中实现：
- **浏览器兼容性**: 优化的跨浏览器支持
- **批量操作**: 最小化 DOM 访问
- **事件管理**: 高效的事件处理

## 性能最佳实践
### 对于核心开发
- 通过基准测试衡量每个更改
- 定期分析内存使用情况
- 积极优化热点路径
- 高效使用浏览器 API

### 对于库用户
- 尽可能优选静态内容
- 批量状态更新
- 为列表渲染使用键值
- 避免在渲染函数中创建对象

## 目标性能指标
基于 [README.md](mdc:README.md) 基准测试：
- **包大小**: < 10KB (相比 React ~45KB)
- **首次渲染**: < 5ms (相比 React ~15ms)
- **1000 节点更新**: < 20ms (相比 React ~35ms)
- **内存使用**: 最小开销

## 持续优化
- 定期性能回归测试
- CI 中的包大小监控
- 内存泄漏检测
- 跨浏览器性能验证

