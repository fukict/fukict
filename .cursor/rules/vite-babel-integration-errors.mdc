---
description: 
globs: 
alwaysApply: false
---
# Vite + Babel 集成常见错误记录

## 🚨 错误记录：JSX 配置冲突

### 错误症状
```
Failed to parse source for import analysis because the content contains invalid JS syntax. 
If you use tsconfig.json, make sure to not set jsx to preserve.
```

### 错误原因
- ❌ **错误做法**：在 vite.config.ts 中设置 `jsx: 'preserve'` 但没有正确配置 babel 处理
- ❌ **错误理解**：以为设置 `jsx: 'preserve'` 就能让 babel 自动接管
- ❌ **配置冲突**：vite 和 babel 的 JSX 处理产生冲突

### 正确解决方案

#### 方案 1: 完全使用 Babel 处理（推荐）
```typescript
// vite.config.ts
export default defineConfig({
  plugins: [
    // 添加 babel 插件
    babel({
      babelHelpers: 'bundled',
      extensions: ['.js', '.jsx', '.ts', '.tsx'],
    }),
  ],
  esbuild: false, // 完全禁用 esbuild
});
```

#### 方案 2: 混合配置（需要精确控制）
```typescript
// vite.config.ts  
export default defineConfig({
  esbuild: {
    jsx: 'transform',
    jsxFactory: 'hyperscript',
    jsxFragment: 'Fragment',
  },
  // 不使用 babel 处理 JSX
});
```

### ✅ 当前项目的正确配置

对于 `@vanilla-dom` 项目：
1. **必须使用 babel-plugin** 进行 JSX 处理
2. **preset-widget** 提供组件注册等扩展功能
3. **不能依赖 esbuild** 处理 JSX

```javascript
// .babelrc.js
module.exports = {
  presets: [
    '@vanilla-dom/preset-widget', // 核心：组件处理
    '@babel/preset-typescript',   // TS 支持
  ],
};
```

```typescript
// vite.config.ts
export default defineConfig({
  // 不设置任何 JSX 相关的 esbuild 配置
  // 让 babel 完全接管
});
```

## 🔧 修复步骤

1. 移除 vite 中的 `jsx: 'preserve'` 配置
2. 确保有正确的 `.babelrc.js` 配置
3. 安装必要的 babel 插件：`pnpm install --save-dev @vitejs/plugin-babel`
4. 重启开发服务器

## 📝 教训总结

- **不要混合使用** vite esbuild 和 babel 处理 JSX
- **明确选择一种方案**：要么全 babel，要么全 esbuild
- **@vanilla-dom 项目必须用 babel**，因为需要组件注册等特殊处理
- **jsx: 'preserve'** 只在有其他工具接管时使用，不是万能配置
