---
description: 
globs: 
alwaysApply: false
---
# Vanilla DOM 项目概览

## 项目目的
Vanilla DOM 是一个高性能的 Web 客户端渲染库，专注于原生 DOM 操作和 JSX 支持。该项目通过编译时优化与运行时精度相结合，实现极致性能。

## 核心理念
- **编译时优化**: 通过 Babel 插件将 JSX 转换为优化的节点树数据结构
- **运行时效率**: 专注于高效的 DOM 创建和更新，保持核心包 < 10KB
- **纯客户端**: 无 SSR 包袱，专为 Web 浏览器优化
- **类型安全**: 完整的 TypeScript 支持，开箱即用的 JSX 类型体验

## 架构设计
项目采用**编译时 + 运行时分离架构**：
1. **编译时**: [packages/babel-plugin](mdc:packages/babel-plugin) 将 JSX 转换为优化的节点树
2. **运行时**: [packages/core](mdc:packages/core) 将节点树渲染为真实 DOM，实现精确更新

## 关键文件
- [README.md](mdc:README.md) - 主要项目文档和功能特性
- [PLAN.md](mdc:PLAN.md) - 详细的架构设计和实施计划
- [package.json](mdc:package.json) - 根工作区配置
- [pnpm-workspace.yaml](mdc:pnpm-workspace.yaml) - Monorepo 工作区设置
- [tsconfig.json](mdc:tsconfig.json) - 工作区 TypeScript 配置

## 包结构
项目遵循专注化包的 monorepo 结构：
- `@vanilla-dom/core` - 核心渲染引擎 + DOM 工具集 + TypeScript 支持
- `@vanilla-dom/babel-plugin` - JSX 编译插件，用于编译时优化
- `@vanilla-dom/component` - (计划中) 可选的组件抽象层

## 开发方法
- **性能优先**: 每个决策都以性能为考量
- **开发体验**: 零配置的 `.tsx` 文件支持
- **类型安全**: 完整的 TypeScript 集成
- **现代工具**: 使用 pnpm、TypeScript 5+、Vite 和现代开发实践
