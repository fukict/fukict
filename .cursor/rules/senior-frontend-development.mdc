---
description: 
globs: 
alwaysApply: false
---
# 🏗️ Vanilla DOM 技术库开发规范

## 📦 Monorepo 包结构

### 包目录标准结构
```
packages/{package-name}/
├── src/                 # 源代码
│   ├── index.ts        # 主入口导出
│   ├── types.ts        # 类型定义
│   └── *.ts            # 功能模块
├── tests/              # 测试文件
│   └── *.test.ts
├── dist/               # 构建输出 (gitignore)
├── package.json        # 包配置
├── tsconfig.json       # TS 配置
├── tsup.config.ts      # 构建配置
├── vitest.config.ts    # 测试配置
└── README.md           # 包文档
```

### 演示项目结构
```
demos/{demo-name}/
├── src/                # 演示源码
├── package.json        # 演示配置
├── vite.config.ts      # 构建配置
├── .babelrc.js         # Babel 配置
└── README.md           # 演示文档
```

## 🔧 包配置标准

### package.json 必需字段
```json
{
  "name": "@vanilla-dom/{package-name}",
  "version": "0.1.0",
  "description": "简洁描述",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs", 
  "types": "./dist/index.d.ts",
  "exports": {
    ".": {
      "import": "./dist/index.mjs",
      "require": "./dist/index.js",
      "types": "./dist/index.d.ts"
    }
  },
  "files": ["dist"],
  "scripts": {
    "build": "tsup",
    "dev": "tsup --watch",
    "test": "vitest",
    "clean": "rm -rf dist"
  },
  "peerDependencies": {
    "typescript": "^5.0.0"
  }
}
```

### tsup.config.ts 构建配置
```typescript
import { defineConfig } from 'tsup';

export default defineConfig({
  entry: ['src/index.ts'],
  format: ['cjs', 'esm'],
  dts: true,
  clean: true,
  sourcemap: true,
  minify: false,
});
```

### vitest.config.ts 测试配置
```typescript
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    environment: 'jsdom',
    globals: true,
  },
});
```

## 🧪 测试用例规范

### 测试文件命名
- 单元测试：`{module}.test.ts`
- 集成测试：`{feature}.integration.test.ts`
- 位置：`tests/` 目录下

### 测试用例结构
```typescript
import { describe, it, expect, beforeEach } from 'vitest';
import { render } from '../src/renderer';

describe('Renderer', () => {
  beforeEach(() => {
    document.body.innerHTML = '';
  });

  it('应该渲染简单元素', () => {
    const vnode = { type: 'div', props: {}, children: [] };
    const element = render(vnode);
    expect(element.tagName).toBe('DIV');
  });

  it('应该处理属性绑定', () => {
    const vnode = { 
      type: 'div', 
      props: { class: 'test', id: 'container' }, 
      children: [] 
    };
    const element = render(vnode);
    expect(element.className).toBe('test');
    expect(element.id).toBe('container');
  });
});
```

## 📋 开发脚本规范

### 根目录脚本
```json
{
  "scripts": {
    "build": "pnpm -r build",
    "dev": "pnpm -r dev", 
    "test": "pnpm -r test",
    "clean": "pnpm -r clean",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "format": "prettier --write .",
    "changeset": "changeset",
    "release": "./scripts/release.sh"
  }
}
```

### 包级别脚本
- `build`: 构建包输出
- `dev`: 开发模式监听
- `test`: 运行测试
- `clean`: 清理构建产物

## 🎯 库开发最佳实践

### API 设计原则
- **最小 API 表面**：只导出必要接口
- **TypeScript 优先**：完整类型定义
- **向后兼容**：谨慎破坏性变更
- **文档驱动**：API 先设计文档

### 性能优化
- **Tree Shaking**：支持按需导入
- **Bundle 分析**：监控包大小
- **编译时优化**：Babel 插件处理
- **运行时优化**：最小化开销

### 错误处理
- **类型安全**：严格 TypeScript 检查
- **边界情况**：异常输入处理
- **错误信息**：清晰的错误提示
- **降级策略**：优雅失败处理

## 🔍 代码质量检查

### 构建前检查清单
- [ ] TypeScript 编译通过
- [ ] 所有测试用例通过
- [ ] ESLint 检查通过
- [ ] Prettier 格式化完成
- [ ] 包大小在预期范围内
- [ ] API 文档更新

### 发布前验证
- [ ] 版本号更新正确
- [ ] CHANGELOG 记录完整
- [ ] 所有包构建成功
- [ ] 演示项目正常运行
- [ ] 依赖关系正确
- [ ] 类型定义导出正确

## 📁 目录路径规范

### 重要：工作目录识别
- **根目录**：`./` (项目根目录)
- **包目录**：`./packages/{name}/`
- **演示目录**：`./demos/{name}/`

### 编辑文件时必须确认
1. 使用 `pwd` 确认当前目录
2. 确认是在正确的包目录下操作
3. 不要在根目录编辑包文件
4. 不要在包目录编辑根目录文件
