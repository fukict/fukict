---
description: 
globs: 
alwaysApply: false
---
# 文件操作指导规则 - 关键经验教训

## ⚠️ 重要警告：目录混淆问题

### 问题描述
在开发过程中反复出现**严重的目录混淆问题**：
- 在 `packages/widget` 目录下工作时，错误地将文件创建到根目录
- 造成项目结构混乱和开发时间浪费

### 根本原因
- 对 `edit_file` 工具的路径解析机制理解错误
- 工作目录上下文维护不当
- 没有在文件操作前确认当前位置

## 🛠️ 强制执行的操作规范

### 1. 文件创建前必须确认
```bash
# 始终先确认当前工作目录
pwd
ls -la
```

### 2. 使用 list_dir 验证
每次创建文件前，使用 `list_dir` 工具确认当前目录内容：
```
list_dir(".")  # 确认当前目录
```

### 3. 创建文件后立即验证
```bash
# 创建文件后立即检查
ls -la | grep filename
```

### 4. 路径规范
- **包开发**: 在 `packages/[package-name]/` 目录下工作
- **根目录**: 仅用于项目级配置文件
- **相对路径**: 明确使用相对路径，避免假设

## 📁 目录结构提醒

```
vanilla-dom/                    # 项目根目录
├── packages/                   # 包目录
│   ├── core/                  # 核心包
│   ├── babel-plugin/          # Babel 插件包
│   └── widget/                # Widget 包
│       ├── src/               # 源代码
│       ├── tests/             # 测试文件
│       ├── package.json       # 包配置
│       ├── tsconfig.json      # TS 配置
│       └── tsup.config.ts     # 构建配置
└── [根目录文件]               # 项目级配置
```

## 🔒 强制检查清单

每次文件操作前必须确认：
- [ ] 我在正确的目录下吗？(`pwd`)
- [ ] 当前目录内容是什么？(`list_dir`)
- [ ] 我要创建的文件类型属于这个目录吗？
- [ ] 创建后文件在正确位置了吗？

## 💾 历史错误记录
- **错误**: 在 `packages/widget` 下工作时将 `package.json`、`tsconfig.json`、`src/` 等文件创建到根目录
- **影响**: 项目结构混乱，浪费开发时间和 token
- **教训**: 绝不假设文件路径，始终显式确认

## 🎯 目标
- **零目录错误**: 所有文件创建在正确位置
- **高效开发**: 避免重复修复目录问题
- **项目整洁**: 保持清晰的 monorepo 结构