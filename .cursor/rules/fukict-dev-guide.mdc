---
description: 整体项目开发概览
globs: 
alwaysApply: true
---
# Fukict 开发指南

## 📦 核心架构
- `@fukict/runtime` - 渲染引擎 < 10KB
- `@fukict/babel-plugin` - JSX 编译优化  
- `@fukict/widget` - 组件编码范式
- `@fukict/babel-preset-widget` - 零配置

## 🏗️ Monorepo 结构
```
packages/{name}/
├── src/index.ts        # 主导出
├── tests/*.test.ts     # 测试
├── package.json        # 包配置
└── vitest.config.ts    # 测试

demos/{name}/
├── src/               # 演示源码
├── vite.config.ts     # 构建配置
└── .babelrc.js        # Babel 配置
```

## 🔧 标准配置

### package.json 核心字段
```json
{
  "name": "@fukict/{name}",
  "main": "./dist/index.js",
  "module": "./dist/index.mjs", 
  "types": "./dist/index.d.ts",
  "scripts": {
    "test": "vitest"
  }
}
```
## 🎯 Widget 开发
```tsx
// 类组件
class MyWidget extends Widget<Props> {
  render() { return <div>{this.props.title}</div> }
}

// 函数组件  
const MyWidget = createWidget<Props>(({ title }) => 
  <div>{title}</div>
)
```

## 🛠️ 开发规范
- **工具链**: pnpm + Vitest
- **类型**: 100% TypeScript 覆盖
- **性能**: DOM 精确操作，自动清理
- **测试**: jsdom 环境，全覆盖

## 🚨 关键防护
- **目录确认**: `pwd` 检查，`packages/{name}/` 非根
- **Vite 配置**: `esbuild: false`，babel 接管 JSX
- **发布流程**: `pnpm release` 统一发布
- **依赖管理**: 强制使用 pnpm

## ⚡ 性能原则
- 编译时优化 > 运行时开销
- Tree Shaking 支持
- Bundle 大小监控 < 10KB
- 精确 DOM 操作
- 自动内存清理

## 📁 目录路径规范

### 重要：工作目录识别
- **根目录**：`./` (项目根目录)
- **包目录**：`./packages/{name}/`
- **演示目录**：`./demos/{name}/`

### 编辑文件时必须确认
1. 使用 `pwd` 确认当前目录
2. 确认是在正确的包目录下操作
3. 不要在根目录编辑包文件
4. 不要在包目录编辑根目录文件
